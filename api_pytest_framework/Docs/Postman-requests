Postman

1) Able to create collections with following requests: GET,PUT,PATCH,DELETE,HEAD,OPTIONS

2) Able to send following types of parameters:
path
query - single,multiple(retrieve results as list)

3) preparing body in following formats :
raw,JSON,form-data,x-www-form-urlencoded,

4) Request chaining - Write Pre-req scripts to get/save token

5) Set and use following variable types:
global , collection, Environment

7) write tests, using code snippets to

- validate response.json()
- response.text()).to.include()
- set params
-  writing to console.

Requests:

1)send GET,POST,PUT,PATCH,DELETE requests
  Understand difference between GET/POST, POST/PUT, PUT/PATCH.
2) send query params through param argument
3) send JSON payload using json argument and text payload using data argument
4) print the final url send to server
5) use response.json() and response.text for validating status codes, particular attributes.
6) get bearer token by sending authentication details in 'data' argument through GET request; save it using request.config.cache and pass on to another test for getting info.
7) Request chaining - create a record and ssve the record_id created, using request.config.cache, pass on to next test to get details of the record created/update the record partialy(PTACH)/update using PUT/delete this record.
8) overrite generate_report hook wrapper to display image in the html report.
9) send headers with following keys:
  - Authorization
  - Accept
  - Content-Type
TO DO
Session ojbects
cookie management
Caching mechanism(know in principle)
Mocking(using unittest.mock) - have idea how to do it using responses library.


what is API?
An inteface which facilitates communication between two apps.

What is a web service?
Software system designed to support interoperable machine-to-machine interaction over a network.
An application that provides some services , accesible over internet.Web services can communicate with each other regardless of the language or platform they are built on. Web services are typically implemented using standard web protocols such as HTTP

What is a web-API?
When the communication between two apps happens over internet it is refered to as a web-API.

Difference between web-service and web-API
a web service is a broader term encompassing various technologies and protocols for machine-to-machine communication, while a web API is a specific type of web service that provides a way for different software applications to communicate with each other over the internet, often using standard protocols like HTTP.

Difference between REST and SOAP API
REST 				 						SOAP
1) Architectural style for communicating using 					1) Protocol for structuring messages using XML
HTTP methods - GET,POST,PUT,PATCH,DELETE 					2) Usually uses HTTP/SMTP
2) Uses HTTP/HTTPS protocols
3) Data formats allowed - JSON,XML,text
Though JSON is usually used 							3) Uses only XML format.
4) Stateless communication - server doesnt maintain 				4) can be stateless or steful but usually manages session.
any session_id or user_profile(maintained in central cache memory/db)		5)If stateful, Testing would include scenarios with session 										management or stateful interactions are part of the use case.
5) Testing involves verifying that each request is independent and
contains all necessary information(through headers, parameters,
or the request body).

Difference between URL and URI.
URI = URL + endpoint(resource)

What all is tested in API-testing?
DOCUMENTATION TESTING
1) Get the API-doc, ascertain that it is complete with all type pf information. say for a given endpoint - which method to use, in which format to send data, as what parameter, what response is expected

SECURITY TESTING
2) Validate Authentication - both positive and negative tests.
3) Validate Authorization
- able to get Auth key/token
- send it back
- able to do the desired actions, as per API doc.
Check for proper ERROR messages displayed..

FUNCTIONAL TESTING
4) Dead links - check that all pages return expected status codes.

5) Schema validation - check that each response returns the expected no. of attributes, Match attributes with expected attributes.
6) Data validation - Validate that data is
(a) complete - none of the expected values is missing/null.
(b) accurate - the values returned are in the expected format and in range of the expected values. This should be tested using test cases with boundary values, partitioning techniques, decision table.
7) DataBase Testing - Validate that the responses recieved actually match with the database enteries as well - this is usually accomplished using Databases API.
8) Parameter testing - test with different combinations of parameters, null parameters, missing parameters. Check for proper ERROR handling.

NON-FUNCTIONAL TESTINGS

7) Response Time - Time the requests and verify that time taken < timeout time, as specified in API doc.
8) Stress testing - Load the API with various loads (using virtual users, using third party tools like JMeter/LoadRunner - even Selenium can be used )

9) Reliability and Stability Testing:

10) Regression Testing; Test that same behaviour is achieved despite other changes, over a period of time.
11) Concurrency testing: Test that concurrent requests achieve results as expected, are correct as per bussiness logic, dont run in race-around conditions...

12) Version Compatibility: Check that backward compatibility is maintained.
13) Mocking: Mock the APIS not yet developed or cannot be accessed.

What is typical approach for API/UI automation?
1) Get relevant application docs and requirements docs.
2) Understand the functionality - this leads to manual testing - test case generation.
3) Get the test environments created - like seperate Database for QA
4) Selecting Automation tool and technology.
5) Get trainined resources or arrage for their training on the same.
6) Build automation framework having following esential components -
	Select a framework to customize - pytest/BDD
	for BDD - define environment.py,

	for pytest -

	- define config file pytest.ini
	- code conftest.py with fixtures to
		-read from a config file
		- read input data say, reading from excel
	 	- access sensitive credentials(using dotenv)
		- customize Logger

	(iv) exception handling - coding custom exceptions if required
	(v) Provide DB connectivity(direct/through API)
	(vi) ability for parallel execution
	(vii) (for UI testing) facility to perform cross-browser testing
	(viii) generate reports

7)Write automation scripts
8) run, generate reports and publish
9) Analyse test results.